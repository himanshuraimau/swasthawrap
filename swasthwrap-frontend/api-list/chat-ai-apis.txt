CHAT & AI APIS FOR SWASTHWRAP FRONTEND (SIMPLIFIED)
=======================================================

1. SEND MESSAGE TO AI
   Method: POST
   Endpoint: /api/chat/message
   Purpose: Send user message to AI and get response
   Headers: Authorization: Bearer <token>
   Request Body:
   {
     "message": "string",
     "language": "en|hi|ta",
     "sessionId": "string (optional)",
     "files": [
       {
         "name": "string",
         "size": "number",
         "type": "string",
         "data": "base64 string"
       }
     ]
   }
   Response:
   {
     "data": {
       "content": "AI response text",
       "confidence": "number (0-1)",
       "sessionId": "string"
     },
     "success": "boolean"
   }

2. GET CHAT HISTORY
   Method: GET
   Endpoint: /api/chat/history
   Purpose: Get simple list of user's chat sessions
   Headers: Authorization: Bearer <token>
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   Response:
   {
     "data": [
       {
         "id": "string",
         "date": "YYYY-MM-DD",
         "title": "string",
         "language": "string",
         "messageCount": "number"
       }
     ],
     "total": "number",
     "page": "number", 
     "limit": "number"
   }

3. GET CHAT SESSION MESSAGES
   Method: GET
   Endpoint: /api/chat/session/{sessionId}
   Purpose: Get all messages from a specific chat session
   Headers: Authorization: Bearer <token>
   Response:
   {
     "data": [
       {
         "id": "string",
         "type": "user|ai",
         "content": "string",
         "timestamp": "ISO date string",
         "language": "string",
         "hasFile": "boolean (optional)"
       }
     ],
     "success": "boolean"
   }

4. DELETE CHAT SESSION
   Method: DELETE
   Endpoint: /api/chat/session/{sessionId}
   Purpose: Delete a specific chat session
   Headers: Authorization: Bearer <token>
   Response:
   {
     "success": "boolean",
     "message": "string"
   }

5. UPLOAD CHAT DOCUMENT
   Method: POST
   Endpoint: /api/chat/upload
   Purpose: Upload document file to be used in chat
   Headers: Authorization: Bearer <token>, Content-Type: multipart/form-data
   Request Body: FormData with file
   Response:
   {
     "data": {
       "fileId": "string",
       "fileName": "string",
       "fileSize": "number",
       "fileType": "string",
       "fileUrl": "string"
     },
     "success": "boolean"
   }

6. DELETE CHAT DOCUMENT
   Method: DELETE
   Endpoint: /api/chat/document/{fileId}
   Purpose: Delete uploaded document
   Headers: Authorization: Bearer <token>
   Response:
   {
     "success": "boolean",
     "message": "string"
   }

7. VOICE TO TEXT
   Method: POST
   Endpoint: /api/chat/voice-to-text
   Purpose: Convert voice recording to text
   Headers: Authorization: Bearer <token>, Content-Type: multipart/form-data
   Request Body: FormData with audio file
   {
     "audio": "file (mp3, wav, m4a)",
     "language": "en|hi|ta"
   }
   Response:
   {
     "data": {
       "text": "string",
       "confidence": "number (0-1)",
       "language": "string"
     },
     "success": "boolean"
   }

8. TEXT TO SPEECH
   Method: POST
   Endpoint: /api/chat/text-to-speech
   Purpose: Convert text to speech audio
   Headers: Authorization: Bearer <token>
   Request Body:
   {
     "text": "string",
     "language": "en|hi|ta",
     "voice": "string (optional)",
     "speed": "number (0.5-2.0) default: 1.0"
   }
   Response:
   {
     "data": {
       "audioUrl": "string",
       "duration": "number (seconds)"
     },
     "success": "boolean"
   }

9. START NEW CHAT SESSION
   Method: POST
   Endpoint: /api/chat/session/new
   Purpose: Start a new chat session
   Headers: Authorization: Bearer <token>
   Request Body:
   {
     "language": "en|hi|ta"
   }
   Response:
   {
     "data": {
       "sessionId": "string",
       "greeting": {
         "content": "string",
         "language": "string",
         "messageId": "string"
       }
     },
     "success": "boolean"
   }
